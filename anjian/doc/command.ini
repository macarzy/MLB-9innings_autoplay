[KeyPress]
格式：KeyPress {鍵盤虛擬碼},{次數} 
解釋：先「按下」再「彈起」鍵，模擬我們平時的「按鍵」操作
我們在使用鍵盤的時候有兩種操作，,一種是「按下」鍵，一種是「彈起」鍵
將這兩個動作連續進行，就是一個完整的「按鍵」動作。按鍵精靈可以模擬所有的鍵盤動作。

[KeyDown]
格式：KeyDown {鍵盤虛擬碼},{次數} 
解釋：「按下」鍵，模擬我們平時的「按下」操作
注意：有些鍵在按下之後，會和其他鍵產生組合效果，比如「Alt/Ctrl/Shift」，
如果使用「按下Alt」命令，那麼之後的「按鍵」動作將變成「Alt+A」等組合動作，
因此記得在必要時使用「彈起」命令將組合鍵釋放，避免影響鍵盤的正常使用。

[KeyUp]
格式：KeyUp {鍵盤虛擬碼},{次數} 
解釋：「彈起」鍵，模擬我們平時的「彈起」操作

[KeyPressH] 
格式：KeyPressH {鍵盤虛擬碼},{次數} 
解釋：模擬按鍵，與KeyPress功能類似，先「按下」再「彈起」鍵，但採取了硬件模擬的方式，
在某些情況下普通模擬按鍵命令會失效，不妨試試硬件模擬命令。

[KeyDownH] 
格式：KeyDownH {鍵盤虛擬碼},{次數} 
解釋：模擬按下，與KeyDown功能類似，「按下」鍵，但採取了硬件模擬的方式，
在某些情況下普通模擬按鍵命令會失效，不妨試試硬件模擬命令。

[KeyUpH]
格式：KeyUpH {鍵盤虛擬碼},{次數} 
解釋：模擬彈起，與KeyUp功能類似，「彈起」鍵，但採取了硬件模擬的方式，
在某些情況下普通模擬按鍵命令會失效，不妨試試硬件模擬命令。

[KeyPressS] 
格式：KeyPressS {鍵盤虛擬碼},{次數} 
解釋：模擬按鍵，與KeyPress功能類似，先「按下」再「彈起」鍵，但採取了新的超級模擬方式，
在某些情況下普通模擬按鍵命令會失效，不妨試試超級模擬命令。

[KeyDownS] 
格式：KeyDownS {鍵盤虛擬碼},{次數} 
解釋：模擬按下，與KeyDown功能類似,「按下」鍵，但採取了新的超級模擬方式，
在某些情況下普通模擬按鍵命令會失效，不妨試試超級模擬命令。

[KeyUpS]
格式：KeyUpS {鍵盤虛擬碼},{次數} 
解釋：模擬彈起，與KeyUp功能類似，「彈起」鍵，但採取了新的超級模擬方式，
在某些情況下普通模擬按鍵命令會失效，不妨試試超級模擬命令。

[WaitKey]
格式：{變量名} = WaitKey  （注意這裡是「變量名」不是「表達式」）
解釋：腳本運行到此句之後暫停，等待用戶按鍵，用戶按鍵之後，將按鍵結果保存到變量當中。

[GetLastKey]
格式：{變量名} = GetLastKey  （注意這裡是「變量名」不是「表達式」）
解釋：腳本運行到此句之後不暫停，將上次用戶按鍵的結果保存到變量當中。

[LeftClick]
格式：LeftClick {次數}
解釋：在鼠標當前位置模擬點擊鼠標左鍵。{次數}可以控制點擊的次數。

[RightClick]
格式：RightClick {次數}
解釋：在鼠標當前位置模擬點擊鼠標右鍵。

[MiddleClick]
格式：MiddleClick {次數}
解釋：在鼠標當前位置模擬點擊鼠標中鍵。

[LeftDoubleClick]
格式：LeftDoubleClick {次數}
解釋：在鼠標當前位置模擬雙擊鼠標左鍵。

[LeftDown]
格式：LeftDown {次數}
解釋：在鼠標當前位置模擬按下鼠標左鍵，{次數}在這個語句中雖然有效，但沒有實際意義。

[LeftUp]
格式：LeftUp {次數}
解釋：在鼠標當前位置模擬鬆開鼠標左鍵，{次數}在這個語句中雖然有效，但沒有實際意義。

[RightDown]
格式：RightDown {次數}
解釋：在鼠標當前位置模擬按下鼠標右鍵，{次數}在這個語句中雖然有效，但沒有實際意義。

[RightUp]
格式：RightUp {次數}
解釋：在鼠標當前位置模擬鬆開鼠標右鍵，{次數}在這個語句中雖然有效，但沒有實際意義。

[LeftClickH]
格式：LeftClickH {次數}
解釋：使用硬件模擬方式，在鼠標當前位置模擬點擊鼠標左鍵。{次數}可以控制點擊的次數，
在某些情況下普通模擬鼠標命令會失效，不妨試試硬件模擬命令。

[RightClickH]
格式：RightClickH {次數}
解釋：使用硬件模擬方式，在鼠標當前位置模擬點擊鼠標右鍵，
在某些情況下普通模擬鼠標命令會失效，不妨試試硬件模擬命令。

[MiddleClickH]
格式：MiddleClickH {次數}
解釋：使用硬件模擬方式，在鼠標當前位置模擬點擊鼠標中鍵，
在某些情況下普通模擬鼠標命令會失效，不妨試試硬件模擬命令。

[LeftDoubleClickH]
格式：LeftDoubleClickH {次數}
解釋：使用硬件模擬方式，在鼠標當前位置模擬雙擊鼠標左鍵，
在某些情況下普通模擬鼠標命令會失效，不妨試試硬件模擬命令。

[LeftDownH]
格式：LeftDownH {次數}
解釋：使用硬件模擬方式，在鼠標當前位置模擬按下鼠標左鍵，{次數}在這個語句中雖然有效，但沒有實際意義，
在某些情況下普通模擬鼠標命令會失效，不妨試試硬件模擬命令。

[LeftUpH]
格式：LeftUpH {次數}
解釋：使用硬件模擬方式，在鼠標當前位置模擬鬆開鼠標左鍵，{次數}在這個語句中雖然有效，但沒有實際意義，
在某些情況下普通模擬鼠標命令會失效，不妨試試硬件模擬命令。

[RightDownH]
格式：RightDownH {次數}
解釋：使用硬件模擬方式，在鼠標當前位置模擬按下鼠標右鍵，{次數}在這個語句中雖然有效，但沒有實際意義，
在某些情況下普通模擬鼠標命令會失效，不妨試試硬件模擬命令。

[RightUpH]
格式：RightUpH {次數}
解釋：使用硬件模擬方式，在鼠標當前位置模擬鬆開鼠標右鍵，{次數}在這個語句中雖然有效，但沒有實際意義，
在某些情況下普通模擬鼠標命令會失效，不妨試試硬件模擬命令。

[LeftClickS]
格式：LeftClickS {次數}
解釋：使用超級模擬方式，在鼠標當前位置模擬點擊鼠標左鍵。{次數}可以控制點擊的次數，
在某些情況下普通模擬鼠標命令會失效，不妨試試超級模擬命令。

[RightClickS]
格式：RightClickS {次數}
解釋：使用超級模擬方式，在鼠標當前位置模擬點擊鼠標右鍵，
在某些情況下普通模擬鼠標命令會失效，不妨試試超級模擬命令。

[MiddleClickS]
格式：MiddleClickS {次數}
解釋：使用超級模擬方式，在鼠標當前位置模擬點擊鼠標中鍵，
在某些情況下普通模擬鼠標命令會失效，不妨試試超級模擬命令。

[LeftDoubleClickS]
格式：LeftDoubleClickS {次數}
解釋：使用超級模擬方式，在鼠標當前位置模擬雙擊鼠標左鍵，
在某些情況下普通模擬鼠標命令會失效，不妨試試超級模擬命令。

[LeftDownS]
格式：LeftDownS {次數}
解釋：使用超級模擬方式，在鼠標當前位置模擬按下鼠標左鍵，{次數}在這個語句中雖然有效，但沒有實際意義，
在某些情況下普通模擬鼠標命令會失效，不妨試試超級模擬命令。

[LeftUpS]
格式：LeftUpS {次數}
解釋：使用超級模擬方式，在鼠標當前位置模擬鬆開鼠標左鍵，{次數}在這個語句中雖然有效，但沒有實際意義，
在某些情況下普通模擬鼠標命令會失效，不妨試試超級模擬命令。

[RightDownS]
格式：RightDownS {次數}
解釋：使用超級模擬方式，在鼠標當前位置模擬按下鼠標右鍵，{次數}在這個語句中雖然有效，但沒有實際意義，
在某些情況下普通模擬鼠標命令會失效，不妨試試超級模擬命令。

[RightUpS]
格式：RightUpS {次數}
解釋：使用超級模擬方式，在鼠標當前位置模擬鬆開鼠標右鍵，{次數}在這個語句中雖然有效，但沒有實際意義，
在某些情況下普通模擬鼠標命令會失效，不妨試試超級模擬命令。

[MoveTo]
格式：MoveTo {X坐標},{Y坐標}
解釋：移動鼠標到(X坐標,Y坐標)處
舉例：
MoveTo 100,200
把鼠標移動到(100,200)這個點上
MoveTo intX,intY
把鼠標移動到(intX,intY)這個點上，需要5.50以上版本支持。

[MoveR]
格式：MoveR {X偏移距離},{Y偏移距離}
解釋：把鼠標相對移動(X偏移距離,Y偏移距離)
舉例：
當前鼠標在(100,100)點，使用下面語句
MoveR 200,300
之後,鼠標就被移到了(100+200,100+300)處，也就是坐標(300,400)處。

[MouseWheel]
格式：MouseWheel {滾動量}
解釋：滾動鼠標滾輪。如果滾動量為正，向上滾動；否則向下滾動，
僅支持Windows 2000以上的操作系統。
舉例：
MouseWheel 1
把鼠標滾輪向上滾動1格。

[MoveToH]
格式：MoveToH {X坐標},{Y坐標}
解釋：移動鼠標到(X坐標,Y坐標)處，類似於MoveTo，但採用了硬件模擬的方式，
在某些情況下普通模擬鼠標命令會失效，不妨試試硬件模擬命令。

[MoveRH]
格式：MoveRH {X偏移距離},{Y偏移距離}
解釋：把鼠標相對移動(X偏移距離,Y偏移距離)，類似於MoveR，但採用了硬件模擬的方式，
在某些情況下普通模擬鼠標命令會失效，不妨試試硬件模擬命令。

[MoveToS]
格式：MoveToS {X坐標},{Y坐標}
解釋：移動鼠標到(X坐標,Y坐標)處，類似於MoveTo，但採用了超級模擬的方式，
在某些情況下普通模擬鼠標命令會失效，不妨試試超級模擬命令。

[MoveRS]
格式：MoveRS {X偏移距離},{Y偏移距離}
解釋：把鼠標相對移動(X偏移距離,Y偏移距離)，類似於MoveR，但採用了超級模擬的方式，
在某些情況下普通模擬鼠標命令會失效，不妨試試超級模擬命令。

[SaveMousePos]
格式：SaveMousePos
解釋：保存當前鼠標位置。

[RestoreMousePos]
格式：RestoreMousePos
解釋：將鼠標移動到上一次保存的鼠標位置。
舉例：保存/恢復鼠標位置常用於製作網絡遊戲練功腳本，腳本開始時保存鼠標位置，腳本結束時恢復鼠標位置，
這樣腳本執行後鼠標的位置就不會變化。

[LockMouse]
格式：LockMouse
解釋：鎖定鼠標位置，用戶將不能通過移動鼠標而改變鼠標位置，而腳本仍可以改變鼠標位置。
舉例：在腳本開始的時候使用這個命令，可以有效防止用戶誤觸鼠標引起腳本執行出錯。

[UnlockMouse]
格式：UnlockMouse
解釋：解除LockMouse命令對鼠標位置的鎖定。如果用戶使用了LockMouse命令而沒有使用UnlockMouse命令，
按鍵精靈會在腳本結束時自動解除鎖定。

[WaitClick]
格式：{變量名} = WaitClick （注意這裡是「變量名」不是「表達式」）
解釋：腳本執行到這一句暫停，按下任意鼠標鍵之後繼續，按下的鼠標鍵將被記錄在變量之中。
舉例：last_click=WaitClick()
MessageBox "您按下了" & last_click

[GetLastClick]
格式：{變量名} = GetLastClick （注意這裡是「變量名」不是「表達式」）
解釋：檢測上一次按下的鼠標代碼，不影響腳本執行的流程。

[GetCursorPos]
格式：Call GetCursorPos(返回屏幕x坐標,返回屏幕y坐標)
解釋：得到當前鼠標所在的位置坐標。

[GetCursorShape]
格式：{變量名} = GetCursorShape({形狀特徵碼方式})
解釋：得到當前鼠標的形狀特徵。

[If]
格式：
If {表達式} Then
…
ElseIf {表達式} Then
…
Else
…
End If
解釋：判斷表達式抓點顏色並執行語句－－通過判斷表達式的取值，來執行後面的動作或控制。

[IfColor]
格式：
IfColor {X坐標},{Y坐標},{顏色},{判斷條件(0：等於 1：不等於 2：近似等於)} Then
…
Else
…
End If
解釋：判斷顏色並執行語句－－通過判斷屏幕x,y坐標的某點的顏色，是等於、不等於、還是近似某顏色，來執行後面的動作或控制。

[Else]
格式：
If {表達式} Then
…
ElseIf {表達式} Then
…
Else
…
End If 
或者
IfColor {X坐標},{Y坐標},{顏色},{判斷條件(0：等於 1：不等於 2：近似等於)} Then
…
Else
…
End If
解釋：和If或IfColor語句結合，進行高級語言的條件判斷。

[ElseIf]
格式：
If {表達式} Then
…
ElseIf {表達式} Then
…
ElseIf {表達式} Then
…
Else
…
End If
解釋：和If或IfColor語句結合，進行高級語言的條件判斷。

[Then]
格式：If {表達式} Then
解釋：和If、IfColor、ElseIf語句結合，進行高級語言的條件判斷。

[While]
格式：
While {循環條件}
…
Wend
解釋：循環語句－－當循環條件成立的時候，反覆執行循環體。

[Wend]
格式：
While {循環條件}
…
Wend
解釋：和While一起構成循環語句。

[For]
格式：
For {循環次數}
…
Next
解釋：循環語句－－循環一定次數。

[Next]
格式：
For {循環次數}
…
Next
解釋：和For一起構成循環語句。

[Select]
格式：
Select Case {變量名}   
Case {情況1}
…
Case {情況2}
…
Case Else
…
End Select 
解釋：根據情況選擇條件判斷。

[Case]
格式：
Select Case {變量名}   
Case {情況}
…
Case Else
…
End Select 
解釋：根據情況選擇條件判斷。

[Do]
格式：
Do While {表達式}
…
Loop
或者
Do Until {表達式}
…
Loop
解釋：條件循環。

[Loop]
格式：
Do While {表達式}
…
Loop
或者
Do Until {表達式}
…
Loop
解釋：條件循環。

[Until]
格式：
Do Until {表達式}
…
Loop
解釋：條件循環。

[Rem]
格式：Rem {文字}
解釋：標記命令。即可當註釋，也可以為Goto跳轉指令作標記。

[Goto]
格式：Goto {標號}
解釋：跳轉語句，可以跳轉到Rem標記過的標記處繼續執行。

[Sub]
格式：
Sub {過程名}
…
End Sub
解釋：定義一個過程，可以在腳本中調用這個過程。

[Function]
格式：
Function {函數過程名}
…
End Function
解釋：定義一個函數過程，可以在腳本中調用這個函數。

[Event]
格式：
Event {窗體名.控件名.事件名}
或
Event {窗體名.事件名}
…
End Event
解釋：定義一個事件處理過程，該過程會在相應的事件發生時，自動被調用。


[Call]
格式：
Call {函數或者過程名}
解釋：調用函數或者過程。

[End If]
解釋：用於配對結束 If 條件判斷。

[End Select]
解釋：用於配對結束 Select Case 選擇情況判斷。

[End Sub]
解釋：用於配對結束 Sub 子程序過程。

[End Function]
解釋：用於配對結束 Function 函數過程。

[End Event]
解釋：用於配對結束 Event 事件處理過程。

[End]
格式：End {關鍵字配對}
解釋：
End If       用於配對結束 If 條件判斷。
End Select   用於配對結束 Select Case 選擇情況判斷。
End Sub      用於配對結束 Sub 子程序過程。
End Function 用於配對結束 Function 函數過程。
End Event    用於配對結束 Event 事件處理過程。
End With     用於配對結束 With 對像結構。

[Exit Do]
解釋：用於配對退出 Do 循環。

[Exit For]
解釋：用於配對退出 For 循環。

[Exit Sub]
解釋：用於配對退出 Sub 子程序過程。

[Exit Function]
解釋：用於配對退出 Function 函數過程。

[Exit Event]
解釋：用於配對退出 Event 事件處理過程。

[Exit]
格式：Exit {關鍵字配對}
解釋：
Exit Do       用於配對退出 Do 循環。
Exit For      用於配對退出 For 循環。
Exit Sub      用於配對退出 Sub 子程序過程。
Exit Function 用於配對退出 Function 函數過程。
Exit Event    用於配對退出 Event 函數過程。

[EndScript]
格式：EndScript
解釋：強制結束腳本的執行。

[GetPixelColor]
格式：{變量名} = GetPixelColor(屏幕X坐標,屏幕Y坐標)
解釋：得到指定位置的點的顏色。

[FindColor]
格式：Call FindColor(屏幕左上角x坐標,屏幕左上角y坐標,屏幕右下角x坐標,屏幕右下角y坐標,16進制顏色值,返回x坐標,返回y坐標)
解釋：在屏幕區域從左到右、從上到下的查找指定的顏色。

[FindColorEx]
格式：Call FindColorEx(屏幕左上角x坐標,屏幕左上角y坐標,屏幕右下角x坐標,屏幕右下角y坐標,16進制顏色值,查找方式,相似度,返回x坐標,返回y坐標)
解釋：在屏幕區域模糊查找指定的顏色。

[FindCenterColor]
格式：Call FindCenterColor(屏幕左上角x坐標,屏幕左上角y坐標,屏幕右下角x坐標,屏幕右下角y坐標,16進制顏色值,返回x坐標,返回y坐標)
解釋：在屏幕區域從中心開始查找指定的顏色。

[FindPic]
格式：Call FindPic(屏幕左上角x坐標,屏幕左上角y坐標,屏幕右下角x坐標,屏幕右下角y坐標,bmp格式圖片路徑,相似度,返回x坐標,返回y坐標)
解釋：在屏幕區域查找指定相似度的圖片。

[Dim]
格式：Dim {變量名}
解釋：定義一個變量。

[ReDim]
格式：ReDim {數組變量名}
解釋：重定義一個數組變量下標。
舉例：
Dim a()
i=0
ReDim a(i)
a(0)=1
MsgBox a(0)

[Preserve]
解釋：當數組被ReDim時，如果參數中有Preserve，已賦值的元素會被保護，值不會變。
舉例：
Dim a()
ReDim a(0)
a(0)=1
ReDim Preserve a(2)
MsgBox a(0)
可以發現a(0)的值不會變空。

[Global]
格式：Global {變量名}
解釋：定義一個全局變量，主要用於多線程之間傳值。

[UBound]
解釋：返回指定數組維數的最大可用下標。

[True]
解釋：用於設置一個布爾型的值為真。

[False]
解釋：用於設置一個布爾型的值為假。

[Randomize]
解釋：初始化隨機數生成器。

[Replace]
解釋：其中指定數目的某子字符串被替換為另一個子字符串。
舉例：
i="我愛你按鍵精靈"
i = Replace(i, "你", "")
MsgBox i
運行可以看到「你」字被替換為空。

[Delay]
格式：Delay {延時}
解釋：腳本暫停執行一段時間。{延時}裡面填寫「毫秒」數。
1秒＝1000毫秒
1分鐘＝60000毫秒
1小時＝3600000毫秒

[MessageBox]
格式：MessageBox {文字}
解釋：簡單的彈出一個窗口，顯示一段文字。

[MsgBox]
格式：MsgBox {文字},{樣式},{標題}
解釋：在對話框中顯示文字消息，等待用戶單擊按鈕，並返回一個值指示用戶單擊的按鈕。
舉例：MsgBox "彈出對話框內容",3,"提示："

[SayString]
格式：SayString {文字}
解釋：在當前窗口輸入文字。
舉例：SayString "你好啊"

[VBSBegin]
格式：
VBSBegin
…
VBSEnd
解釋：構成一個VBScript塊。
在VBScript塊中可以使用任何VBScript語句（包括VBScript的條件判斷、子程序調用等等），也可以使用大多數的按鍵精靈命令。

[VBSEnd]
格式：
VBSBegin
…
VBSEnd
解釋：構成一個VBScript塊。
在VBScript塊中可以使用任何VBScript語句（包括VBScript的條件判斷、子程序調用等等），也可以使用大多數的按鍵精靈命令。

[UserVar]
用於支持用戶設置腳本參數。
標準型自定義變量
格式：UserVar {變量}={默認值} {註釋}
解釋：這個命令主要用於用戶自定義的設置功能。
舉例：
UserVar var1=30 "當HP＜多少％時，使用紅藥"
UserVar var2=30 "當MP＜多少％時，使用藍藥"
當用戶使用這個腳本的時候，可以對這var1和var2這兩個變量的取值進行設置。
下拉型自定義變量
格式：UserVar 變量=DropList{"選項0"："值0"|"選項1"："值1"|"選項2"："值2"}=默認顯示的選項編號 {"註釋"}
解釋：這個命令預先設定多個變量值，用戶可在基面通過下拉方式進行選擇
舉例：
UserVar Var1=DropList{"低於10%時補血"：0.1|"低於20%時補血"：0.2|"低於30%時補血"：0.3}=2 "自動補血設置"
特別提醒：默認顯示的選項編號從0開始。

[PutAttachment]
格式：PutAttachment {路徑},{要釋放的文件}
解釋：把當前腳本包含的附件展開到指定的路徑下。<路徑>是指定的相對路徑或者絕對路徑。
如果省略<路徑>或者<路徑>為 . ，則默認展開到按鍵精靈所在的文件夾中，
可以指定要釋放的文件，允許使用通配符，如 *.bmp。如果不指定要釋放的文件，則默認釋放所有文件。
舉例：
PutAttachment "C：\","*.bmp"
所有bmp文件釋放到C盤

[Import]
格式：Import {vbs文件}
或 Import {插件dll文件}
解釋：導入一個vbs文件或者插件dll文件。當文件被導入後，裡面的函數可以直接被調用，不需要使用（Plugin.）命令，
在VBScript塊中需要調用vbs文件或者插件中的函數時，必須採用這種方式，不能使用（Plugin.）命令。
舉例：
Import "Color.dll"
MsgBox Color.GetRGB(255, 0, 0)

[TracePrint]
格式：TracePrint {要輸出的信息}
解釋：如果腳本在按鍵精靈的調試狀態下運行，這行命令會把要輸出的信息（可以包含變量）發送到調試框，
如果腳本不在調試狀態下運行，這行命令沒有任何作用。

[SetSimMode]
格式：SetSimMode {模擬方式}
解釋：設置鼠標、鍵盤的模擬方式。當模擬方式設為1時，所有的普通模擬都自動變為硬件模擬；當模擬方式設為2時，所有的普通模擬都自動變為超級模擬，
當模擬方式設為0時，將變回普通模擬。

[Beep]
解釋：主板蜂鳴器響一聲。

[RunApp]
格式：Call RunApp(要運行的程序或者文件路徑)
解釋：啟動一個程序或者打開一個文件。

[Plugin]
格式：Plugin.{插件名}.{插件函數}
解釋：調用一個外部插件提供的函數。我們將逐漸製作多種複雜功能的插件並隨按鍵精靈最新版本提供。

[Lib]
格式：Lib.{命令庫名}.{命令庫函數}
解釋：調用一個命令庫提供的函數。我們將逐漸製作多種複雜功能的命令庫並隨按鍵精靈最新版本提供。

[LogStart]
格式：LogStart {日誌文件名}
解釋：將腳本運行的日誌信息保存在指定的文件中，以便作者調試檢查。
舉例：LogStart "C:\日誌.log"

[LogStop]
格式：LogStop
解釋：停止記錄腳本日誌，用於配對結束LogStart。

[ExitScript]
格式：ExitScript
解釋：退出當前腳本的執行，包含所有子線程。

[RestartScript]
格式：RestartScript
解釋：退出當前腳本的執行，包含所有子線程，並重新啟動執行。

[DimEnv]
備註：用於多線程功能，不推薦新手使用。

[BeginThread]
格式：{返回線程ID} = BeginThread(過程名)
解釋：啟動某個線程。
備註：用於多線程功能，不推薦新手使用。

[StopThread]
格式：StopThread {線程ID}
解釋：停止某個線程。
備註：用於多線程功能，不推薦新手使用。

[PauseThread]
格式：PauseThread {線程ID}
解釋：暫停某個線程。
備註：用於多線程功能，不推薦新手使用。

[ContinueThread]
格式：ContinueThread {線程ID}
解釋：繼續某個線程。
備註：用於多線程功能，不推薦新手使用。

[GetThreadID]
格式：{線程ID} = GetThreadID()
解釋：得到當前線程ID。
備註：用於多線程功能，不推薦新手使用。


